package fr.emre.tp;

import java_cup.runtime.Symbol;
import java.util.HashMap;
import fr.emre.tp.Node.TypeNode;

action code {:
	private HashMap<String,Integer> vars = new HashMap<>();
	private boolean erreur = false;
:};


parser code {:
  public void report_error(String message, Object info) {
 	String m = "";
 	if (info instanceof java_cup.runtime.Symbol) {
 	    Symbol s = ((Symbol) info);
 		if (s != null && s.left >= 0 ) {
 			m =  "Ligne " + (s.left+1) + ", Colonne " + (s.right+1) + " : ";
 			}
 		}
 	m = m + message;
    System.err.println(m);
    }
:};

 init with {:
:};

terminal PLUS, MOINS, MOINS_UNAIRE, MUL, DIV, MOD, NOT, OR, AND, PAR_G, PAR_D, SEMI, POINT, LET, INPUT, OUTPUT, IF, THEN,
ELSE, WHILE, DO, EGAL, GT, GTE, LT, LTE, NIL, ERROR;
terminal Integer ENTIER;
terminal String IDENT;

non terminal Node program, sequence, expression, expr;

precedence nonassoc OUTPUT;
precedence right OR;
precedence right AND;
precedence right NOT;
precedence nonassoc EGAL;
precedence nonassoc GT, GTE, LT, LTE;
precedence left PLUS, MOINS;
precedence left MUL, DIV, MOD;
precedence left MOINS_UNAIRE;

program ::=
	sequence:s POINT  {: RESULT = s;:}
	;

sequence ::= expression:e1 SEMI sequence:e2 {: RESULT = new Node(TypeNode.SEQUENCE,";",e1,e2); :}
	 	   | expression:e   {: RESULT = e; :}
	 	   | {: RESULT = null; :}
	 	   ;

expression ::= expr:e                                                   {: RESULT = e;                                       :}
             | LET IDENT:name EGAL expression:e                                {: RESULT = new Node(TypeNode.EXPRESSION,"let",new Node(TypeNode.VAR,name.toString(),null,null),e);                                              :}
             | WHILE expr:cond DO expression:e                          {: RESULT = new Node(TypeNode.EXPRESSION,"while",cond,e);                                           :}
             | IF expr:cond THEN expression:a1 ELSE expression:a2       {: RESULT = new Node(TypeNode.EXPRESSION,"if",cond,new Node(TypeNode.EXPRESSION,"Action",a1,a2));   :}
             | error
			 ;

//
expr ::= NOT:op expr:e
       | expr:e1 AND expr:e2    {: RESULT = new Node(TypeNode.EXPR,"and",e1,e2);              :}
	   | expr:e1 OR expr:e2     {: RESULT = new Node(TypeNode.EXPR,"or",e1,e2);               :}
	   | expr:e1 EGAL expr:e2   {: RESULT = new Node(TypeNode.EXPR,"==",e1,e2);               :}
	   | expr:e1 GT expr:e2     {: RESULT = new Node(TypeNode.EXPR,"<",e1,e2);                :}
	   | expr:e1 GTE expr:e2    {: RESULT = new Node(TypeNode.EXPR,"<=",e1,e2);               :}
	   | expr:e1 LT expr:e2     {: RESULT = new Node(TypeNode.EXPR,">",e1,e2);                :}
       | expr:e1 LTE expr:e2    {: RESULT = new Node(TypeNode.EXPR,">=",e1,e2);               :}
	   | expr:e1 PLUS expr:e2   {: RESULT = new Node(TypeNode.EXPR,"+",e1,e2);                :}
	   | expr:e1 MOINS expr:e2  {: RESULT = new Node(TypeNode.EXPR,"-",e1,e2);                :}
	   | expr:e1 MUL expr:e2    {: RESULT = new Node(TypeNode.EXPR,"*",e1,e2);                :}
	   | expr:e1 DIV expr:e2    {: RESULT = new Node(TypeNode.EXPR,"/",e1,e2);                :}
	   | expr:e1 MOD expr:e2    {: RESULT = new Node(TypeNode.EXPR,"mod",e1,e2);              :}
	   | MOINS expr:e	        {: RESULT = new Node(TypeNode.EXPR,"-",e,null);               :}		 %prec MOINS_UNAIRE
	   | OUTPUT expr:e          {: RESULT = new Node(TypeNode.OUTPUT,"output",e,null);        :}
	   | INPUT                  {: RESULT = new Node(TypeNode.INPUT,"input",null,null);       :}
	   | NIL                    {: RESULT = new Node(TypeNode.NIL,"nil",null,null);           :}
	   | ENTIER:n               {: RESULT = new Node(TypeNode.INT,n.toString(), null,null);   :}
	   | IDENT:id               {: RESULT = new Node(TypeNode.VAR,id,null,null);              :}
	   | PAR_G sequence:e PAR_D {: RESULT = e;                                                  :}
	   ;
